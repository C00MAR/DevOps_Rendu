name: CI/CD Pipeline - Todo App

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  ECR_client_REPOSITORY: todo-app-client
  ECR_server_REPOSITORY: todo-app-server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install and test client
      run: |
        cd client
        npm ci
        npm test -- --coverage --passWithNoTests

    - name: Install server dependencies
      run: |
        cd server
        npm ci

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push client image
      run: |
        cd client
        docker build \
          -t $ECR_REGISTRY/$ECR_client_REPOSITORY:latest \
          .
        docker push $ECR_REGISTRY/$ECR_client_REPOSITORY:latest

    - name: Build and push server image
      run: |
        cd server
        docker build \
          -t $ECR_REGISTRY/$ECR_server_REPOSITORY:latest \
          .
        docker push $ECR_REGISTRY/$ECR_server_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          source ~/.bashrc
          
          mkdir -p /home/ec2-user/todo-app
          cd /home/ec2-user/todo-app
          
          if ! command -v docker compose &> /dev/null; then
            echo "Docker compose not find"
            alias docker compose='docker compose'
          fi
          
          echo "login ECR"
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
          
          if [ $? -ne 0 ]; then
            echo "error login ecr"
            exit 1
          fi
          
          if [ ! -f docker compose.yml ]; then
            echo "creation docker compose.yml..."
            cat > docker compose.yml << 'EOF'
          services:
            client:
              image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/todo-app/client:latest
              ports:
                - "80:80"
              environment:
                - server_HOST=${{ secrets.EC2_HOST }}
                - server_PORT=3001
              depends_on:
                - server
              restart: unless-stopped
              networks:
                - todo-network

            server:
              image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/todo-app/server:latest
              ports:
                - "3001:3001"
              environment:
                - NODE_ENV=production
                - PORT=3001
                - AWS_REGION=eu-west-1
                - DYNAMODB_TABLE_NAME=todo-app-todos
              restart: unless-stopped
              networks:
                - todo-network

          networks:
            todo-network:
              driver: bridge
          EOF
          fi
          
          echo "stop services run"
          docker compose down || true
          
          echo "clean images"
          docker image prune -f
          
          echo "crawl images"
          docker compose pull
          
          echo "start services"
          docker compose up -d
          
          sleep 30
          
          echo "Statut :"
          docker compose ps

    - name: Health Check
      run: |
        sleep 30
        
        if curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.EC2_HOST }}:3001/api/health; then
          echo "API Health Check: OK"
        else
          echo "API Health Check: FAILED"
          exit 1
        fi
        
        # Test du client
        if curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.EC2_HOST }}; then
          echo "client Health Check: OK"
        else
          echo "client Health Check: WARNING"
        fi
        
        echo ""
        echo "Deploy Good"
        echo "url  appli :"
        echo "   client: http://${{ secrets.EC2_HOST }}"
        echo "   API: http://${{ secrets.EC2_HOST }}:3001"
        echo "   Health Check: http://${{ secrets.EC2_HOST }}:3001/api/health"
  