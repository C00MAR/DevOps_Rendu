name: CI/CD Pipeline - Todo App

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 135808930620.dkr.ecr.eu-west-1.amazonaws.com
  ECR_CLIENT_REPOSITORY: todo-app/client
  ECR_SERVER_REPOSITORY: todo-app/server

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install and test client
      run: |
        cd client
        npm ci
        npm test -- --coverage --passWithNoTests

    - name: Install server dependencies
      run: |
        cd server
        npm ci

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push client image
      run: |
        cd client
        docker build \
          --build-arg REACT_APP_API_URL=http://18.203.139.83:5001 \
          -t $ECR_REGISTRY/$ECR_CLIENT_REPOSITORY:latest \
          .
        docker push $ECR_REGISTRY/$ECR_CLIENT_REPOSITORY:latest

    - name: Build and push server image
      run: |
        cd server
        docker build \
          -t $ECR_REGISTRY/$ECR_SERVER_REPOSITORY:latest \
          .
        docker push $ECR_REGISTRY/$ECR_SERVER_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          cd /home/ec2-user/todo-app || mkdir -p /home/ec2-user/todo-app && cd /home/ec2-user/todo-app
          
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 135808930620.dkr.ecr.eu-west-1.amazonaws.com
          
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          services:
            client:
              image: 135808930620.dkr.ecr.eu-west-1.amazonaws.com/todo-app/client:latest
              ports:
                - "80:80"
              environment:
                - REACT_APP_API_URL=http://18.203.139.83:5001
              depends_on:
                - server
              restart: unless-stopped
              networks:
                - todo-network

            server:
              image: 135808930620.dkr.ecr.eu-west-1.amazonaws.com/todo-app/server:latest
              ports:
                - "5001:5001"
              environment:
                - NODE_ENV=production
                - PORT=5001
                - AWS_REGION=eu-west-1
                - DYNAMODB_TABLE_NAME=todo-app-todos
              restart: unless-stopped
              networks:
                - todo-network

          networks:
            todo-network:
              driver: bridge
          EOF
          fi
          
          docker-compose down || true
          
          docker image prune -f
          
          docker-compose pull
          
          docker-compose up -d
          
          sleep 15
          docker-compose ps

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.EC2_HOST }}:5001/health || (echo "API Health Check Failed" && exit 1)
        curl -f http://${{ secrets.EC2_HOST }} || (echo "Frontend Health Check Failed" && exit 1)
        echo "deploy succes"
        echo "front: http://${{ secrets.EC2_HOST }}"
        echo "api: http://${{ secrets.EC2_HOST }}:5001"
